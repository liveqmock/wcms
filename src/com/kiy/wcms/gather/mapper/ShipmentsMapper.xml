<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kiy.wcms.gather.mapper.ShipmentsMapper">
	<select id="getShipOrderList" resultType="ShipOrder" parameterType="GatherParam">
		SELECT 
        	o.ORDER_ID as orderId,
        	o.ORDER_NO as orderNo,  
        	o.ORDER_CLIENT_NAME as clientName, 
        	o.LINKMAN as linkman,
        	o.PHONE as phone,
        	o.ORDER_PAY_PLACE as payPlace,
        	u.REALNAME as signUser,
        	IFNULL(sum(d.QUANTITY),0)-IFNULL(sum(sd.AMOUNT),0) as surplus
		FROM 
        	T_ORDER o 
        	left join SYS_USER u on o.ORDER_SIGNER = u.ID 
        	left join ORDER_PRO_DETAIL d on o.ORDER_ID = d.ORDER_ID 
        	LEFT JOIN SHIPMENTS s on o.ORDER_ID = s.ORDER_ID
        	left join SHIPMENTS_DETAIL sd on s.ID = sd.SHIPMENTSID
		WHERE 
			o.ORDER_STATUS = 30
			<if test="orderNo != null">
				and o.ORDER_NO like CONCAT('%',#{orderNo},'%')
			</if>
			<if test="orderName != null">
				and o.ORDER_NAME like CONCAT('%',#{orderName},'%')
			</if>
			<if test="clientName != null">
				and o.ORDER_CLIENT_NAME like CONCAT('%',#{clientName},'%')
			</if>
			<if test="signUser != null">
				and o.ORDER_SIGNER = #{signUser}
			</if>
			<if test="signDateBegin != null">
				and o.ORDER_SIGN_DATE >= #{signDateBegin}
			</if>
			<if test="signDateEnd != null">
				and o.ORDER_SIGN_DATE &lt;= #{signDateEnd}
			</if>
			<if test="payDateBegin != null">
				and o.ORDER_PAY_DATE >= #{payDateBegin}
			</if>
			<if test="payDateEnd != null">
				and o.ORDER_PAY_DATE &lt;= #{payDateEnd}
			</if>
			<if test="totalBegin != null">
				and o.ORDER_TOTAL >= #{totalBegin}
			</if>
			<if test="totalEnd != null">
				and o.ORDER_TOTAL &lt;= #{totalEnd}
			</if>
		group by 
			o.ORDER_ID, o.ORDER_NO, o.ORDER_CLIENT_NAME, o.LINKMAN, o.PHONE, u.REALNAME,o.ORDER_PAY_PLACE
		<if test="status != null">
			<if test="status != 0">
				<choose>
					<when test="status == 1">
						having IFNULL(sum(d.QUANTITY),0)-IFNULL(sum(sd.AMOUNT),0) != 0
					</when>
					<otherwise>
						having IFNULL(sum(d.QUANTITY),0)-IFNULL(sum(sd.AMOUNT),0) = 0
					</otherwise>
				</choose>
			</if>
		</if>
		ORDER BY 
			o.ORDER_CREATE_TIME desc
		LIMIT #{begin},#{rows}
	</select>
	
	<select id="getShipOrderTotal" resultType="Integer" parameterType="GatherParam">
		SELECT 
        	count(o.ORDER_ID)
		FROM 
        	T_ORDER o 
        	left join SYS_USER u on o.ORDER_SIGNER = u.ID 
        	left join ORDER_PRO_DETAIL d on o.ORDER_ID = d.ORDER_ID 
        	LEFT JOIN SHIPMENTS s on o.ORDER_ID = s.ORDER_ID
        	left join SHIPMENTS_DETAIL sd on s.ID = sd.SHIPMENTSID
		WHERE 
			o.ORDER_STATUS = 30
			<if test="orderNo != null">
				and o.ORDER_NO like CONCAT('%',#{orderNo},'%')
			</if>
			<if test="orderName != null">
				and o.ORDER_NAME like CONCAT('%',#{orderName},'%')
			</if>
			<if test="clientName != null">
				and o.ORDER_CLIENT_NAME like CONCAT('%',#{clientName},'%')
			</if>
			<if test="signUser != null">
				and o.ORDER_SIGNER = #{signUser}
			</if>
			<if test="signDateBegin != null">
				and o.ORDER_SIGN_DATE >= #{signDateBegin}
			</if>
			<if test="signDateEnd != null">
				and o.ORDER_SIGN_DATE &lt;= #{signDateEnd}
			</if>
			<if test="payDateBegin != null">
				and o.ORDER_PAY_DATE >= #{payDateBegin}
			</if>
			<if test="payDateEnd != null">
				and o.ORDER_PAY_DATE &lt;= #{payDateEnd}
			</if>
			<if test="totalBegin != null">
				and o.ORDER_TOTAL >= #{totalBegin}
			</if>
			<if test="totalEnd != null">
				and o.ORDER_TOTAL &lt;= #{totalEnd}
			</if>
		group by 
			o.ORDER_ID, o.ORDER_NO, o.ORDER_CLIENT_NAME, o.LINKMAN, o.PHONE, u.REALNAME,o.ORDER_PAY_PLACE
		<if test="status != null">
			<if test="status != 0">
				<choose>
					<when test="status == 1">
						having IFNULL(sum(d.QUANTITY),0)-IFNULL(sum(sd.AMOUNT),0) != 0
					</when>
					<otherwise>
						having IFNULL(sum(d.QUANTITY),0)-IFNULL(sum(sd.AMOUNT),0) = 0
					</otherwise>
				</choose>
			</if>
		</if>
	</select>
	
	<select id="getShipmentsByOrderId" resultType="Shipments">
		SELECT 
			s.ID id, 
			s.CODE as code, 
			u.REALNAME as applyUserName, 
			s.APPLYDATE as applyDate, 
			s.SHIPMENTDATE as shipmentsDate, 
			s.STATUS as status
		FROM 
			SHIPMENTS s left join SYS_USER u on s.APPLYUSER = u.ID 
		WHERE 
			ORDER_ID = #{orderId}
	</select>
	
	<select id="getNextNo" resultType="Integer">
		SELECT max(right(CODE,4)) FROM SHIPMENTS
	</select>
	
	<select id="getOrderById" resultType="Order">
		SELECT 
			o.ORDER_ID as id,
			o.ORDER_NO as no,
			o.ORDER_NAME as name,
			u.REALNAME as signerName,
			o.ORDER_TOTAL as total,
			o.ORDER_SIGN_DATE as signDate,
			o.ORDER_CLIENT_NAME as clientName,
			o.ORDER_PAY_PLACE as payPlace,
			o.ORDER_PAY_DATE as payDate,
			o.ORDER_WARRANTEE as warrantee
		FROM 
			T_ORDER o left join SYS_USER u on o.ORDER_SIGNER = u.ID
		WHERE 
			o.ORDER_ID = #{orderId}
	</select>
	
	<insert id="saveShipments" parameterType="Shipments" useGeneratedKeys="true">
		<selectKey order="AFTER" keyProperty="id" keyColumn="id" resultType="Integer">
			SELECT LAST_INSERT_ID() AS id
		</selectKey>
		INSERT INTO SHIPMENTS (ORDER_ID, CODE, CREATEDATE, CREATEUSER, STATUS) VALUES
		(#{orderId}, #{code}, now(), #{createUser}, 0)
	</insert>
	
	<select id="getShipmentsById" resultType="Shipments">
		SELECT 
			o.ORDER_NAME as orderName,
			u.REALNAME as signUserName,
			s.CODE as code,
			o.ORDER_TOTAL as total,
			o.ORDER_SIGN_DATE as signDate,
			o.ORDER_CLIENT_NAME as clientName,
			o.ORDER_PAY_PLACE as payPlace,
			o.ORDER_PAY_DATE as payDate,
			o.ORDER_WARRANTEE as warningDate,
			s.APPLYUSER as applyUser,
			u1.REALNAME as applyUserName,
			s.APPLYDATE as applyDate,
			s.SHIPMENTDATE as shipmentsDate,
			s.REMARK as remark      
		FROM 
			SHIPMENTS s left join T_ORDER o on s.ORDER_ID = o.ORDER_ID left join SYS_USER u on o.ORDER_SIGNER = u.ID
			left join SYS_USER u1 on s.applyUser = u1.ID
		WHERE
			s.ID = #{id}
	</select>
	
	<update id="updateShipments" parameterType="Shipments">
		UPDATE 
			SHIPMENTS 
		SET 
			APPLYUSER = #{applyUser}, APPLYDATE = #{applyDate}, SHIPMENTDATE = #{shipmentsDate}, 
			REMARK = #{remark} 
		WHERE 
			ID = #{id}
	</update>
	
	<select id="getOrderDetailList" resultType="ShipmentsDetail">
		SELECT 
			o.ID as orderDetailId, 
			o.NAME as orderDetailName, 
			o.QUANTITY as orderDetailQuantity, 
			sum(IFNULL(s.AMOUNT,0)) as hadAmount, 
			o.QUANTITY - sum(IFNULL(s.AMOUNT,0)) as surplusAmount 
		FROM 
			ORDER_PRO_DETAIL o left join SHIPMENTS_DETAIL s on o.ID = s.ORDER_DETAIL_ID 
		WHERE 
			o.ORDER_ID = #{orderId}
		GROUP BY 
			o.ID, o.NAME, o.QUANTITY
		HAVING 
			o.QUANTITY - sum(IFNULL(s.AMOUNT,0)) > 0
	</select>
	
	<delete id="delete">
		DELETE FROM SHIPMENTS WHERE ID = #{id}
	</delete>
	
	<update id="submitShipments">
		UPDATE SHIPMENTS SET STATUS = 10 WHERE ID = #{id}
	</update>
	
	<update id="submitAudit">
		UPDATE SHIPMENTS SET STATUS = #{status} WHERE ID = #{id}
	</update>
	
	<select id="getAuditList" parameterType="GatherParam" resultType="Shipments">
		SELECT 
			s.ID as id,
			s.CODE as code,
			u.REALNAME as applyUserName,
			s.APPLYDATE as applyDate,
			s.SHIPMENTDATE as shipmentsDate,
			s.STATUS as status,
			o.ORDER_NO as orderNo,
			o.ORDER_ID as orderId
		FROM 
			SHIPMENTS s left join T_ORDER o on s.ORDER_ID = o.ORDER_ID left join SYS_USER u on s.APPLYUSER = u.ID
		where 1=1
		<if test="orderNo != null">
				and o.ORDER_NO like CONCAT('%',#{orderNo},'%')
			</if>
			<if test="orderName != null">
				and o.ORDER_NAME like CONCAT('%',#{orderName},'%')
			</if>
			<if test="clientName != null">
				and o.ORDER_CLIENT_NAME like CONCAT('%',#{clientName},'%')
			</if>
			<if test="signUser != null">
				and o.ORDER_SIGNER = #{signUser}
			</if>
			<if test="signDateBegin != null">
				and o.ORDER_SIGN_DATE >= #{signDateBegin}
			</if>
			<if test="signDateEnd != null">
				and o.ORDER_SIGN_DATE &lt;= #{signDateEnd}
			</if>
			<if test="payDateBegin != null">
				and o.ORDER_PAY_DATE >= #{payDateBegin}
			</if>
			<if test="payDateEnd != null">
				and o.ORDER_PAY_DATE &lt;= #{payDateEnd}
			</if>
			<if test="totalBegin != null">
				and o.ORDER_TOTAL >= #{totalBegin}
			</if>
			<if test="totalEnd != null">
				and o.ORDER_TOTAL &lt;= #{totalEnd}
			</if>
			<choose>
				<when test="auditStatus == 0">
					and s.STATUS = #{seeStatus}
				</when>
				<otherwise>
					and s.STATUS > #{seeStatus}
				</otherwise>
			</choose>	
		ORDER BY 
			s.APPLYDATE desc
		LIMIT
			#{begin},#{rows}	 
	</select>
	
	<select id="getAuditTotal" parameterType="GatherParam" resultType="Integer">
		SELECT 
			count(1)
		FROM 
			SHIPMENTS s left join T_ORDER o on s.ORDER_ID = o.ORDER_ID left join SYS_USER u on s.APPLYUSER = u.ID
		WHERE 1=1
		<if test="orderNo != null">
				and o.ORDER_NO like CONCAT('%',#{orderNo},'%')
			</if>
			<if test="orderName != null">
				and o.ORDER_NAME like CONCAT('%',#{orderName},'%')
			</if>
			<if test="clientName != null">
				and o.ORDER_CLIENT_NAME like CONCAT('%',#{clientName},'%')
			</if>
			<if test="signUser != null">
				and o.ORDER_SIGNER = #{signUser}
			</if>
			<if test="signDateBegin != null">
				and o.ORDER_SIGN_DATE >= #{signDateBegin}
			</if>
			<if test="signDateEnd != null">
				and o.ORDER_SIGN_DATE &lt;= #{signDateEnd}
			</if>
			<if test="payDateBegin != null">
				and o.ORDER_PAY_DATE >= #{payDateBegin}
			</if>
			<if test="payDateEnd != null">
				and o.ORDER_PAY_DATE &lt;= #{payDateEnd}
			</if>
			<if test="totalBegin != null">
				and o.ORDER_TOTAL >= #{totalBegin}
			</if>
			<if test="totalEnd != null">
				and o.ORDER_TOTAL &lt;= #{totalEnd}
			</if>
			<choose>
				<when test="auditStatus == 0">
					and s.STATUS = #{seeStatus}
				</when>
				<otherwise>
					and s.STATUS > #{seeStatus}
				</otherwise>
			</choose>
	</select>
	
	<select id="getBackShipmentTotal" resultType="Integer">
		SELECT count(1) FROM shipments where STATUS = -5555
	</select>
	<!--
	<select id="getUnShipmentTotal" resultType="Integer">
		
	</select>
	-->
	
	<select id="getGatherTotal" resultType="Shipments">
		SELECT 
			o.ORDER_TOTAL as orderTotal, 
			IFNULL(sum(g.TOTAL),0) as gatherTotal 
		FROM 
			t_order o left join gathering g on o.ORDER_ID = g.ORDER_ID 
		where o.ORDER_ID=(
			SELECT ORDER_ID FROM shipments where ID = #{id})
		group by 
			o.ORDER_TOTAL,o.ORDER_ID
	</select>
</mapper>